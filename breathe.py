import sys
import time
import pymorphy2
import pyglet
import pyttsx3
import threading
import warnings

warnings.filterwarnings("ignore")

""" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤, –≤–¥–æ—Ö–æ–≤ –≤ —Ä–∞—É–Ω–¥–µ, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ –≤–¥–æ—Ö–µ"""
rounds, breaths, hold = 4, 30, 15


def play_wav(src):
    wav = pyglet.media.load(sys.path[0] + '\\src\\wav\\' + src + '.wav')
    wav.play()
    time.sleep(wav.duration)


def play_wav_inline(src):
    wav = pyglet.media.load(sys.path[0] + '\\src\\wav\\' + src + '.wav')
    wav.play()


def nums(what, morph=pymorphy2.MorphAnalyzer()):
    """ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Å —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏, —Å—Ç–æ—è—â–∏–º–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º–∏ """
    what = what.replace('  ', ' ').replace(',', ' ,')
    phrase = what.split(' ')
    for i in range(1, len(phrase)):
        if 'NUMB' in morph.parse(phrase[i - 1])[0].tag:
            phrase[i] = str(morph.parse(phrase[i])[0].make_agree_with_number(abs(int(phrase[i - 1]))).word)
        if 'NUMB' in morph.parse(phrase[i - 2])[0].tag:
            phrase[i] = str(morph.parse(phrase[i])[0].make_agree_with_number(abs(int(phrase[i - 2]))).word)
    return ' '.join(phrase).replace(' ,', ',')


def speak(what):
    speech_voice = 3  # –≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
    rate = 120
    tts = pyttsx3.init()
    voices = tts.getProperty("voices")
    tts.setProperty('rate', rate)
    tts.setProperty("voice", voices[speech_voice].id)
    print('üîä', what)
    tts.say(what)
    tts.runAndWait()
    # tts.stop()


class Workout:

    def __init__(self, rounds=3, breaths=30, hold=15):
        self.rounds = rounds
        self.breaths = breaths
        self.hold = hold
        self.round_times = []
        self.lock = threading.Lock()  # –≤–∑–∞–∏–º–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤

    def __str__(self):
        return '\n‚ôª{} üó£{} ‚è±{}'.format(self.rounds, self.breaths, self.hold)

    def __hold_breath(self):
        start_time = time.time()
        input()
        seconds = int(time.time() - start_time)
        mins = seconds // 60
        secs = seconds % 60
        self.round_times.append('{:02}:{:02}'.format(mins, secs))
        play_wav_inline('inhale')
        self.say('–ì–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö. ' + nums("{} –º–∏–Ω—É—Ç–∞ {} —Å–µ–∫—É–Ω–¥–∞".format(mins, secs)))

    def __clock_tick(self):
        for i in range(self.hold):
            # self.say(hold - i)
            play_wav('clock')

    def __breathe_round(self, round):
        self.say('–†–∞—É–Ω–¥ ' + str(round))
        for i in range(self.breaths):
            if i % 10 == 0:
                play_wav_inline('gong')
            print(i + 1, end=' ')
            play_wav('inhale')
            play_wav('exhale')
        print()
        self.say('–ó–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ –≤—ã–¥–æ—Ö–µ')
        self.__hold_breath()
        # self.say('–î–µ—Ä–∂–∏–º ' + nums(str(self.hold) + ' —Å–µ–∫—É–Ω–¥–∞'))
        self.__clock_tick()
        play_wav_inline('exhale')
        self.say('–í—ã–¥–æ—Ö')
        time.sleep(1)

    def breathe(self):
        self.say('–í—ã–ø–æ–ª–Ω—è–µ–º ' + nums(str(self.rounds) + ' —Ä–∞—É–Ω–¥ –ø–æ ' + str(self.breaths) + ' –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ ' +
                                     str(self.breaths) + ' —Å–ø–æ–∫–æ–π–Ω—ã–π –≤—ã–¥–æ—Ö'))
        self.say('–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏—Å—å. –ù–∞—á–∞–ª–∏')
        for i in range(self.rounds):
            self.__breathe_round(i + 1)
        self.say('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—ã—Ö–∞–Ω–∏–µ. –ù–∞—á–∏–Ω–∞–µ–º —à–µ–≤–µ–ª–∏—Ç—å—Å—è —Å –ø–∞–ª—å—Ü–µ–≤ —Ä—É–∫ –∏ –Ω–æ–≥')

    def statistics(self):
        print('=============')
        for i in range(len(self.round_times)):
            print('–†–∞—É–Ω–¥', i, self.round_times[i])
        print('=============')

    def say(self, what):
        self.lock.acquire()
        thread = threading.Thread(target=speak, kwargs={'what': what})
        thread.start()
        thread.join()
        self.lock.release()


workout = Workout(rounds, breaths, hold)
workout.breathe()

workout.statistics()
